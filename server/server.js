
const express = require("express");
const { Pool } = require("pg");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors"); // Add the cors module
const pool=require("./db")
const app = express();
const port = 5000;



const secretKey = 'a24f41837ef05ad9e52a3794dab8c0055cc7baf383db5d19534454768751a344';

// Test the database connection
pool
  .connect()
  .then(() => {
    console.log("Connected to PostgreSQL database");

  })
  .catch((err) => {
    console.error("Error connecting to PostgreSQL database:", err);
  });

  app.use(express.json({limit:'50mb'}));
  app.use(cors()); // Enable CORS for all routes

app.post('/Register', async (req, res) => {
  const { username, email, password ,domain, address ,role} = req.body;
  const hashedPassword = bcrypt.hashSync(password, 10);
  console.log(req.body)
  try {
    const checkEmailSql = 'SELECT * FROM users WHERE email = $1';
    const checkEmailValues = [email];
    const checkEmailResult = await pool.query(checkEmailSql, checkEmailValues);

    if (checkEmailResult.rows.length > 0) {
      return res.status(400).json({ error: 'Email already registered' });
    }

    const sql = 'INSERT INTO users (username, email, password, domain, address, role) VALUES ($1, $2, $3, $4,$5,$6) RETURNING *';
    const values = [username, email, hashedPassword, domain, address, role];
    const insertResult = await pool.query(sql, values);

    const insertedUserId = insertResult.rows[0].id; // Assuming the 'id' is generated by the database during insertion
    const token = jwt.sign({ id: insertedUserId, username, email ,domain, address}, secretKey);
    res.json({ token, message: 'User registered successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while registering the user' });
  }
});


app.post('/Login', (req, res) => {
  const { email, password } = req.body; // Assuming the email and password are provided in the request body

  const sql = 'SELECT * FROM users WHERE email = $1';

  pool.query(
    sql, [email],
    async (error, results) => {
      if (error) {
        return res.status(400).json(error);
      }

      const user = results.rows[0];

      if (!user || !(await bcrypt.compare(password, user.password))) {

        return res.status(401).send("incorrect email or password");
      }
      else {
        const token = jwt.sign({ id: user.id, username: user.username, email: user.email }, secretKey);
        res.json({ token: token, message: 'User registered successfully' });
      }
    }
  );

});


app.get("/checkToken", authenticateToken, (req, res) => {
  res.send(req.user);
});

function authenticateToken(req, res, next) {
  const authHeader = req.headers.authorization.trim()
  console.log(authHeader)
  const token = authHeader 

  if (!token) {
    console.log("/////////////////////////////////////////////////////")

    return res.status(401).json({ error: "Not found" });
    
  }

  jwt.verify(token,secretKey, (err, decoded) => {
    console.log( secretKey)
    if (err) {
      console.log("***************************************")

      return res.status(403).json({ error: "Invalid" });

    }
   console.log(decoded)
    req.user = decoded;
    next();
  });
}
///////////////////////////////////////request of user
app.post("/request", (req, res) => {
  const {user_id, description ,photo} = req.body;
  console.log(user_id,description,photo);
  pool.query(
    "INSERT INTO requests(user_id, description ,photo) VALUES($1,$2,$3) RETURNING*",
    [user_id, description ,photo],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {

        res.status(201).send(result.rows);
      }
    }
  );
});
///////////////////////////////////////Product of makhiata 
      

app.post("/product", (req, res) => {
  // const { name, description, price, product_id, photo } = req.body;
  const { name, description, price,image, product_id} = req.body;

  // console.log(name, description, price, product_id, photo);
  pool.query(
    // "INSERT INTO product(name, description, price, product_id, photo, flag) VALUES($1, $2, $3, $4, $5, false) RETURNING *",
    "INSERT INTO products(name, description, price,image, product_id) VALUES($1, $2, $3, $4, $5) RETURNING *",

    // [name, description, price, product_id, photo],
    [name, description, price,image, product_id],

    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.status(201).send(result.rows);
      }
    }
  );
});



app.get('/profileProvider/:id', async function (req, res) {
  try {
    const { id } = req.params;
    console.log(id);
    const user = await pool.query("SELECT * FROM users WHERE id = $1", [id]);
    console.log(user)
    res.json(user.rows); // Assuming there is only one user with the given ID
  } catch (err) {
    console.log(err.message);
    res.status(500).json({ error: 'An error occurred while fetching user data' });
  }
});



/////////give all makhaiet
app.get('/stitched', async function (req, res) {
  try {
    // const { id } = req.params;
    // console.log(id);
    const user = await pool.query("SELECT * FROM users where role= 'مخيطة'");
    res.json(user.rows); // Assuming there is only one user with the given ID
  } catch (err) {
    console.log(err.message);
    res.status(500).json({ error: 'An error occurred while fetching user data' });
  }
});
  

///////////////////////
app.get('/productCollection/:product_id', async function (req, res) {
  try {
    // const { id } = req.params;
    // console.log(id);
    const user = await pool.query("SELECT * FROM products WHERE id=$1");
    res.json(user.rows); // Assuming there is only one user with the given ID
  } catch (err) {
    console.log(err.message);
    res.status(500).json({ error: 'An error occurred while fetching user data' });
  }
});

// app.get("/resort", (req, res) => {
//   const q = "SELECT * FROM resort where active = true "
//   pool.query(q, (err, data) => {
//     if (err) return res.json(err)
//     return res.json(data.rows)
//   })
// })




app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});






