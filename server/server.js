
const express = require("express");
const { Pool } = require("pg");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors"); // Add the cors module
const pool=require("./db")
const app = express();
const port = 5000;



const secretKey = 'a24f41837ef05ad9e52a3794dab8c0055cc7baf383db5d19534454768751a344';

// Test the database connection
pool
  .connect()
  .then(() => {
    console.log("Connected to PostgreSQL database");

  })
  .catch((err) => {
    console.error("Error connecting to PostgreSQL database:", err);
  });

app.use(express.json());
app.use(cors()); // Enable CORS for all routes

app.post('/Register', async (req, res) => {
  const { username, email, password ,domain, address ,role} = req.body;
  const hashedPassword = bcrypt.hashSync(password, 10);
  console.log(req.body)
  try {
    const checkEmailSql = 'SELECT * FROM users WHERE email = $1';
    const checkEmailValues = [email];
    const checkEmailResult = await pool.query(checkEmailSql, checkEmailValues);

    if (checkEmailResult.rows.length > 0) {
      return res.status(400).json({ error: 'Email already registered' });
    }

    const sql = 'INSERT INTO users (username, email, password, domain, address, role) VALUES ($1, $2, $3, $4,$5,$6) RETURNING *';
    const values = [username, email, hashedPassword, domain, address, role];
    const insertResult = await pool.query(sql, values);

    const insertedUserId = insertResult.rows[0].id; // Assuming the 'id' is generated by the database during insertion
    const token = jwt.sign({ id: insertedUserId, username, email ,domain, address}, secretKey);
    res.json({ token, message: 'User registered successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while registering the user' });
  }
});


app.post('/Login', (req, res) => {
  const { email, password } = req.body; // Assuming the email and password are provided in the request body

  const sql = 'SELECT * FROM users WHERE email = $1';

  pool.query(
    sql, [email],
    async (error, results) => {
      if (error) {
        return res.status(400).json(error);
      }

      const user = results.rows[0];

      if (!user || !(await bcrypt.compare(password, user.password))) {

        return res.status(401).send("incorrect email or password");
      }
      else {
        const token = jwt.sign({ id: user.id, username: user.username, email: user.email }, secretKey);
        res.json({ token: token, message: 'User registered successfully' });
      }
    }
  );

});


app.get("/checkToken", authenticateToken, (req, res) => {
  res.send(req.user);
});

function authenticateToken(req, res, next) {
  const authHeader = req.headers.authorization.trim()
  console.log(authHeader)
  const token = authHeader 

  if (!token) {
    console.log("/////////////////////////////////////////////////////")

    return res.status(401).json({ error: "Not found" });
    
  }

  jwt.verify(token,secretKey, (err, decoded) => {
    console.log( secretKey)
    if (err) {
      console.log("***************************************")

      return res.status(403).json({ error: "Invalid" });

    }
   console.log(decoded)
    req.user = decoded;
    next();
  });
}
//////////////////////////
// app.get("/protected", (req, res) => {
//   const protected = async  (req, res) => {
//     const token = req.headers.authorization.trim();
//     if (!token) {
//       return res.status(401).json({ message: 'No token provided.' });
//     }
  
//     jwt.verify(token, SECRETKEY, (err, decoded) => {
//       if (err) {
//         console.log("token error:", err); // Log the error object for debugging
//         return res.status(403).json({ message: 'Failed to authenticate token.' });
//       }
//       console.log("token Authenticated");
//       res.json({ message: 'Authenticated', user: decoded });
//     });
//   };
// }
// )

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});






